#!/bin/bash

# Disclaimer: GENERATED BY AI

# Define the directories for source files and testbenches
SRC_DIR="src"
TB_DIR="testbenches"

# Define modules and their corresponding testbenches
declare -A module_testbenches
module_testbenches["alu"]="alu_tb.sv"
module_testbenches["pc"]="pc_tb.sv"
module_testbenches["regset"]="regset_tb.sv"
module_testbenches["timekeeper"]="timekeeper_tb.sv"
module_testbenches["trafficlight"]="trafficlight_tb.sv"  # Added testbench for trafficlight.sv

# Define module dependencies
declare -A module_dependencies
module_dependencies["trafficlight"]="timekeeper.sv ctrl_trafficlight.sv"

# Parse command line arguments
selected_modules=()
while getopts "m:" opt; do
    case ${opt} in
        m )
            IFS=',' read -ra selected_modules <<< "$OPTARG"
            ;;
        \? )
            echo "Usage: $0 [-m module1,module2,...]"
            exit 1
            ;;
    esac
done

# If no modules specified, test all modules
if [ ${#selected_modules[@]} -eq 0 ]; then
    modules_to_test=("${!module_testbenches[@]}")
else
    modules_to_test=("${selected_modules[@]}")
fi

# Loop through each module and run its testbenches
for module in "${modules_to_test[@]}"; do
    # Skip if module doesn't exist
    if [ -z "${module_testbenches[$module]}" ]; then
        echo "Warning: Module $module not found. Skipping."
        continue
    fi

    src_file="${SRC_DIR}/${module}.sv"
    testbenches=(${module_testbenches[$module]})

    for tb in "${testbenches[@]}"; do
        tb_file="${TB_DIR}/${tb}"
        output_file="simulation_${module}_${tb%_tb.sv}.out"

        # Check if both the source file and testbench file exist
        if [[ -f "$src_file" && -f "$tb_file" ]]; then
            echo "Running testbench $tb for $module..."

            # Prepare dependency files
            dependencies=${module_dependencies[$module]}
            dependency_files=()
            if [[ -n "$dependencies" ]]; then
                for dep in $dependencies; do
                    dep_file="${SRC_DIR}/${dep}"
                    if [[ -f "$dep_file" ]]; then
                        dependency_files+=("$dep_file")
                    else
                        echo "Error: Dependency file $dep_file not found for module $module. Aborting."
                        exit 1
                    fi
                done
            fi

            # Compile and run the simulation
            iverilog -I src/ -g 2012 -o "$output_file" "$tb_file" "$src_file" "${dependency_files[@]}"

            # Check if compilation was successful
            if [ $? -ne 0 ]; then
                echo "Error: Compilation failed for $module with testbench $tb. Aborting."
                exit 1
            fi

            vvp "$output_file"

            # Check if simulation ran successfully
            if [ $? -eq 0 ]; then
                echo "$module test with $tb completed."
            else
                echo "Error: Simulation failed for $module with testbench $tb. Aborting."
                exit 1
            fi

            # Remove the output file after running
            rm -f "$output_file"
        else
            echo "Skipping $tb for $module: source or testbench file not found."
        fi
    done
done

echo "All tests completed successfully."
